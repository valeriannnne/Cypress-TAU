const derefArgsCallStack = []
function derefArgs(refer, arg) {
  if (derefArgsCallStack.includes(arg)) return arg // prevent circular reference
  try {
    derefArgsCallStack.push(arg)
    if (refer.isRef(arg)) return refer.deref(arg)
    else if (Array.isArray(arg)) {
      const derefArg = []
      for (const argument of arg) {
        derefArg.push(derefArgs(refer, argument))
      }
      return derefArg
    } else if (typeof arg === 'object') {
      const derefArg = {}
      for (const [key, value] of Object.entries(arg)) {
        derefArg[key] = derefArgs(refer, value)
      }
      return derefArg
    }
    return arg
  } finally {
    derefArgsCallStack.pop()
  }
}

module.exports = {
  derefArgs,
}
